var tipuesearch = {"pages":[{"title":" Example ","text":"Example Developer Info Harry Lime","tags":"home","loc":"index.html"},{"title":"example.f90 – Example","text":"Contents Programs example Modules point_module Source Code example.f90 Source Code module point_module !! Point type and associated functions type point !! A point on a two dimensional plane real :: x !! 'x' coordinate real :: y !! 'y' coordinate end type interface operator ( + ) !! Overload '+' operator for adding points module procedure point_add end interface interface operator ( - ) !! Overloard '0' operator for subtracting points module procedure point_negative module procedure point_subtract end interface contains function point_add ( p1 , p2 ) result ( p3 ) !! Add two point objects type ( point ), intent ( in ) :: p1 , p2 type ( point ) :: p3 p3 % x = p1 % x + p2 % x p3 % y = p1 % y + p2 % y end function function point_negative ( p1 ) result ( p2 ) !! Get the negative value of a point type ( point ), intent ( in ) :: p1 type ( point ) :: p2 p2 % x = - p1 % x p2 % y = - p1 % y end function function point_subtract ( p1 , p2 ) result ( p3 ) !! Subtract two points type ( point ), intent ( in ) :: p1 , p2 type ( point ) :: p3 p3 = p1 + ( - p2 ) end function end module program example use , intrinsic :: iso_fortran_env , only : ou => output_unit use point_module type ( point ) :: a = point ( 1 , 2 ) type ( point ) :: b = point ( 2 , 4 ) type ( point ) :: c c = a + b write ( ou , '(g0)' ) c % x , c % y c = - c write ( ou , '(g0)' ) c % x , c % y c = b - a write ( ou , '(g0)' ) c % x , c % y end program","tags":"","loc":"sourcefile/example.f90.html"},{"title":"point – Example ","text":"type, public :: point A point on a two dimensional plane Contents Variables x y Components Type Visibility Attributes Name Initial real, public :: x 'x' coordinate real, public :: y 'y' coordinate","tags":"","loc":"type/point.html"},{"title":"point_add – Example","text":"public function point_add(p1, p2) result(p3) Add two point objects Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 type( point ), intent(in) :: p2 Return Value type( point ) Called by proc~~point_add~~CalledByGraph proc~point_add point_add interface~operator (+) operator (+) interface~operator (+)->proc~point_add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/point_add.html"},{"title":"point_negative – Example","text":"public function point_negative(p1) result(p2) Get the negative value of a point Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 Return Value type( point ) Called by proc~~point_negative~~CalledByGraph proc~point_negative point_negative interface~operator (-) operator (-) interface~operator (-)->proc~point_negative Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/point_negative.html"},{"title":"point_subtract – Example","text":"public function point_subtract(p1, p2) result(p3) Subtract two points Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 type( point ), intent(in) :: p2 Return Value type( point ) Called by proc~~point_subtract~~CalledByGraph proc~point_subtract point_subtract interface~operator (-) operator (-) interface~operator (-)->proc~point_subtract Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/point_subtract.html"},{"title":"operator (+) – Example","text":"public interface operator (+) Overload '+' operator for adding points Calls interface~~operator (+)~~CallsGraph interface~operator (+) operator (+) proc~point_add point_add interface~operator (+)->proc~point_add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures point_add Module Procedures public function point_add (p1, p2) result(p3) Add two point objects Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 type( point ), intent(in) :: p2 Return Value type( point )","tags":"","loc":"interface/operator (+).html"},{"title":"operator (-) – Example","text":"public interface operator (-) Overloard '0' operator for subtracting points Calls interface~~operator (-)~~CallsGraph interface~operator (-) operator (-) proc~point_negative point_negative interface~operator (-)->proc~point_negative proc~point_subtract point_subtract interface~operator (-)->proc~point_subtract Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures point_negative point_subtract Module Procedures public function point_negative (p1) result(p2) Get the negative value of a point Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 Return Value type( point ) public function point_subtract (p1, p2) result(p3) Subtract two points Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 type( point ), intent(in) :: p2 Return Value type( point )","tags":"","loc":"interface/operator (-).html"},{"title":"point_module – Example","text":"Point type and associated functions Used by module~~point_module~~UsedByGraph module~point_module point_module program~example example program~example->module~point_module Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces operator (+) operator (-) Derived Types point Functions point_add point_negative point_subtract Interfaces public interface operator (+) Overload '+' operator for adding points public function point_add (p1, p2) result(p3) Add two point objects Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 type( point ), intent(in) :: p2 Return Value type( point ) public interface operator (-) Overloard '0' operator for subtracting points public function point_negative (p1) result(p2) Get the negative value of a point Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 Return Value type( point ) public function point_subtract (p1, p2) result(p3) Subtract two points Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 type( point ), intent(in) :: p2 Return Value type( point ) Derived Types type, public :: point A point on a two dimensional plane Components Type Visibility Attributes Name Initial real, public :: x 'x' coordinate real, public :: y 'y' coordinate Functions public function point_add (p1, p2) result(p3) Add two point objects Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 type( point ), intent(in) :: p2 Return Value type( point ) public function point_negative (p1) result(p2) Get the negative value of a point Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 Return Value type( point ) public function point_subtract (p1, p2) result(p3) Subtract two points Arguments Type Intent Optional Attributes Name type( point ), intent(in) :: p1 type( point ), intent(in) :: p2 Return Value type( point )","tags":"","loc":"module/point_module.html"},{"title":"example – Example","text":"Uses iso_fortran_env point_module program~~example~~UsesGraph program~example example module~point_module point_module program~example->module~point_module iso_fortran_env iso_fortran_env program~example->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables a b c Variables Type Attributes Name Initial type( point ) :: a = point(1, 2) type( point ) :: b = point(2, 4) type( point ) :: c","tags":"","loc":"program/example.html"}]}